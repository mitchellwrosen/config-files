" Big default verb/action changes:
"
" * J = page down
" * K = page up
" * s = surround word
" * S = surround WORD
" * SS = surround line
" * U = redo
" * x = exchange
"
" TODO
" * shada?
" * Alt-K doesn't seem to work
" * Make 'sp' etc repeatable
" * Write function to make ds search for nearest surround and delete it
" * better function snippet (add args as I add types to type sig?)
" * lens snippet
" * prism snippet
" * replace easy-align

" ==============================================================================
" Plugins
" ==============================================================================

cal plug#begin(stdpath('data') . '/plugged')

Plug 'ElmCast/elm-vim', { 'for': 'elm' }
Plug 'LnL7/vim-nix', { 'for': 'nix' }
Plug 'RRethy/vim-illuminate' " Highlight occurrences of the word under the cursor
Plug 'Yggdroot/indentLine' " show markers every 2 columns of leading whitespace
Plug 'godlygeek/tabular' " Align on words
Plug 'itchyny/lightline.vim'
Plug 'junegunn/fzf.vim' " Fuzzy search source code, files, etc
Plug 'justinmk/vim-sneak' " two-letter f/t
Plug 'liuchengxu/vim-which-key' " thingy to tell me my own hotkeys (requires manual work)
Plug 'mcchrish/nnn.vim' " File browser thingy, kinda sucks, what's better?
Plug 'mengelbrecht/lightline-bufferline'
Plug 'mhinz/vim-signify' " Sign column
Plug 'mhinz/vim-startify' " Startup screen
Plug 'morhetz/gruvbox' " best color scheme
Plug 'neoclide/coc.nvim', { 'branch': 'release' }
Plug 'neovimhaskell/haskell-vim', { 'for': 'haskell' }
Plug 'psliwka/vim-smoothie' " Smooth paging up and down
Plug 'purescript-contrib/purescript-vim', { 'for': 'purescript' }
Plug 'rhysd/git-messenger.vim'
Plug 'romainl/vim-cool' " Automatically unhighlight when cursor moves
Plug 'romainl/vim-qf' " Vim quickfix improvements
Plug 'sdiehl/vim-ormolu', { 'for': 'haskell' }
Plug 'terryma/vim-multiple-cursors' " Multiple cursors for quick and dirty renaming
Plug 'tmsvg/pear-tree' " auto-pair function that claims to not suck; we'll see
Plug 'tommcdo/vim-exchange' " Swap the location of two selections
Plug 'tpope/vim-characterize' " Improved 'ga'
Plug 'tpope/vim-commentary' " Quick (un-)commenting
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-repeat' " Make '.' repeat more things out of the box
Plug 'tpope/vim-surround' " Some surround helpers
Plug 'unblevable/quick-scope' " Highlight the first, second, etc. instances of characters on a line
Plug 'vmchale/dhall-vim', { 'for': 'dhall' }
Plug 'wellle/targets.vim'
" https://github.com/voldikss/vim-floaterm/issues/163
" Plug 'voldikss/vim-floaterm' " floating terminal, almost good but nah

cal plug#end() " Automatically calls syntax on, filetype plugin indent on

" ==============================================================================
" Basic settings
" ==============================================================================

colo gruvbox

se bg=dark
se cb=unnamed,unnamedplus     " yank also copies to both clipboards
se cc=121                     " highlight column
se cul                        " higlight the current line
se et                         " convert tabs to spaces
se gp=rg\ --vimgrep           " use rg to grep
se hid                        " don't abandon out-of-sight buffers
se ic                         " case-insensitive searching
se icm=split                  " show live command substitutions
se lz                         " don't draw during e.g. applying a macro
se lbr                        " wrap lines in a more visually pleasing way
se lcs=tab:>\ ,trail:Â·,nbsp:+ " trailing whitespace markers
se list                       " show trailing whitespace, tabs, etc.
se nofen                      " never fold
se nojs                       " insert one space after ., ?, ! chars when joining
se noml                       " disable modelines
se nosmd                      " don't show mode, since lightline handle that
se nosol                      " don't jump cursor to start of line when moving
se nu                         " show line number gutter
se so=10                      " start scrolling before the cursor reaches the edge
se sr                         " shift to multiple of shiftwidth
se sw=2
se scl=yes                    " always draw signcolumn
se scs                        " don't ignore case if search contains uppercase char
se si                         " smart autoindenting when starting a new line
se smc=180                    " dont bother syntax-highlighting past this column
se stal=2                     " always show the tabline
se sts=2                      " tab key makes 2 spaces
se tgc
se title                      " put filename in window title
se tm=300                     " only wait this many ms for key sequence to complete
se udf                        " persist undo history across buffer exits
se ut=100                     " fire CursorHold after 100ms (default 4000ms)
se wmnu                       " complete commands with a little menu
se wim=list:longest,full      " wild menu completion behavior

" ==============================================================================
" Key mappings
" ==============================================================================

no ; :

" <Tab> to switch to the previously edited buffer
nn <Tab> <C-^>

" d. to delete the current line
nn d. ^D

" Prevent the cursor from jumping past a wrapped line when moving up and down
nn j gj
nn k gk

nn H ^
nn L $
ono H ^
ono L $
vn H ^
vn L g_

" Center after every search movement
nn n nzz
nn N Nzz
vn n nzz
vn N Nzz

nn r; r:
nn r: r;

" Disable annoying command search 'q:' that I never use
nn q: <Nop>

nn Q @q

" Make Y yank to the end of line, similar to how C and D behave
nn Y y$
" After visual mode yank, leave cursor at the end of the highlight
vn Y y`]

" U to redo. <C-r> comes from some plugin, maybe vim-repeat? (annoying)
nn U <C-r>
" Weaning myself of <C-R> to redo
nn <C-r> <Nop>

" Don't highlight matches *and* jump at the same time; only highlight
nn * *``
vn * y/<C-r>"<CR>
nn # #``

" Follow >>/<< shifted text around with the cursor
nm >> <Plug>MyNmapLl
nm << <Plug>MyNmapHh
" Get it to repeat with '.'
nn <silent> <Plug>MyNmapLl >>ll:cal repeat#set("\<Plug>MyNmapLl")<CR>
nn <silent> <Plug>MyNmapHh <<hh:cal repeat#set("\<Plug>MyNmapHh")<CR>

" ,j to join (since J moves down)
nn ,j m`J``

" Ctrl+S to search-and-replace in the file
nn <C-s> :%s//g<Left><Left>
xn <C-s> :s//g<Left><Left>

" Move buffers with Ctrl+jk
nn <silent> <C-j> :bn<CR>
nn <silent> <C-k> :bp<CR>

" Delete the current buffer with Space-d, or quit vim if it's the only buffer
nn <expr> <silent> <Space>d len(getbufinfo({'buflisted': 1})) ==? 1 ? ":q\<CR>" : ":bd\<CR>"

" Move vertical splits with Ctrl+hl (sorry, horizontal splits)
" I never use vertical splits anyway so these could be repurposed.
nn <C-h> <C-w>h
nn <C-l> <C-w>l

" github.com/mitchellwrosen/repld stuff
nn <silent> <Space>s m`vip<Esc>:silent '<,'>w !repld-send --no-echo<CR>``
nn <silent> <Space>S m`:silent w !repld-send<CR>``
vn <silent> <Space>s m`<Esc>:silent '<,'>w !repld-send<CR>``

ino ; :
ino : ;

" <C-v> to paste from * register
ino <C-v> <C-r>*

" Ctrl+space for omnicomplete
im <C-Space> <C-x><C-o>

" When a popup menu is visible, move thru it with tab and select with enter
" ino <expr> <Tab> pumvisible() ? "\<C-n>" : "\<Tab>"
ino <expr> <Tab> pumvisible() ? "\<C-n>" : coc#refresh()
ino <expr> <CR> pumvisible() ? "\<C-y>" : "\<CR>"

ino <C-u> <Nop>

" ------------------------------------------------------------------------------
" Terminal mode
" ------------------------------------------------------------------------------

" tno <A-[> <Esc>

" ==============================================================================
" Commands
" ==============================================================================

" command! Vimrc e "~/.config/nvim/init.vim"

" ==============================================================================
" Functions
" ==============================================================================

function! s:GetSelectedText() abort
  let [l:lnum1, l:col1] = getpos("'<")[1:2]
  let [l:lnum2, l:col2] = getpos("'>")[1:2]
  if &selection ==# 'exclusive'
    let l:col2 -= 1
  endif
  let l:lines = getline(l:lnum1, l:lnum2)
  let l:lines[-1] = l:lines[-1][:l:col2 - 1]
  let l:lines[0] = l:lines[0][l:col1 - 1:]
  return l:lines
endfunction

" Remove trailing whitespace, then restore cursor position
function! <SID>StripTrailingWhitespaces()
  let l = line('.')
  let c = col('.')
  %s/\s\+$//e
  cal cursor(l, c)
endfun

" function! <SID>EchoQuickFixEntry()
"   let entries = getqflist()
"   let bufnr = bufnr('%')
"   let lnum = line('.')
"   for e in entries
"     if e.bufnr == bufnr && e.lnum == lnum
"       echo e.text
"       return
"     endif
"   endfor
" endfunction

let s:mitchell_term_bufid = v:null
let g:mitchell_term_jobid = v:null
let s:mitchell_term_winid = v:null

let s:mitchell_term_opts = {}
function! s:mitchell_term_opts.on_exit(jobid, data, event) abort
  " If the terminal process exits before the buffer, close the buffer, too
  if bufexists(s:mitchell_term_bufid)
    execute 'bw!' s:mitchell_term_bufid
  endif
  let g:mitchell_term_jobid = v:null
endfunction

function! MitchellTerm()
  " We're in the terminal, so toggling it would require knowing some other
  " window to jump to. Too much work.
  if nvim_get_current_buf() ==# s:mitchell_term_bufid
    return

  " Terminal window exists (even though it might be showing some other buffer)
  elseif s:mitchell_term_winid !=# v:null && winbufnr(s:mitchell_term_winid) !=# -1
    call nvim_win_close(s:mitchell_term_winid, v:false)

  else
    " let editableWidth = s:GetEditableWidth()
    let opts = {}
    " let opts.col = 120 + winwidth(0) - editableWidth
    let opts.col = winwidth(0) - 80
    let opts.height = line('w$') - line('w0') + 1
    let opts.relative = 'editor'
    let opts.row = 1
    let opts.style = 'minimal'
    " let opts.width = editableWidth - 120
    let opts.width = 80

    " Terminal window doesn't exist, but terminal buffer does
    if bufexists(s:mitchell_term_bufid)
      let s:mitchell_term_winid = nvim_open_win(s:mitchell_term_bufid, v:false, opts)
      "
    " Neither terminal window nor buffer exist
    else
      let s:mitchell_term_bufid = nvim_create_buf(v:false, v:true)
      let winid = nvim_get_current_win()
      let s:mitchell_term_winid = nvim_open_win(s:mitchell_term_bufid, v:true, opts)
      let g:mitchell_term_jobid = termopen(&shell, s:mitchell_term_opts)
      call nvim_win_set_option(s:mitchell_term_winid, 'winbl', 20)
      call win_gotoid(winid)
    endif
  endif
endfunction

" Compute the width of the editable part of the screen
function! s:GetEditableWidth()
  redir => x
    exe "sil sign place buffer=" . nvim_get_current_buf()
  redir end
  let signlist = split(x, '\n')
  return winwidth(0) - ((&number || &relativenumber) ? &numberwidth : 0) - &foldcolumn - (len(signlist) > 1 ? 2 : 0)
endfunction

function! s:MitchellTermSendSelection() abort
  if g:mitchell_term_jobid !=# v:null
    let lines = s:GetSelectedText()
    return chansend(g:mitchell_term_jobid, lines + [""])
  else
    return 0
  endif
endfunction

command! -range MitchellTermSendSelection call s:MitchellTermSendSelection()

nn <silent> <Space>tt :call MitchellTerm()<CR>
nn <silent> <Space>ts m`vip<Esc>:'<,'>MitchellTermSendSelection<CR>``
vn <silent> <Space>ts :MitchellTermSendSelection<CR>

" ==============================================================================
" Autocommands
" ==============================================================================

aug mitchellwrosen
  autocmd!
aug END

" Jump to last cursor position on file open
au mitchellwrosen BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$") | exe "norm! g`\"" | endif

" Strip trailing whitespace on save
au mitchellwrosen BufWritePre * cal <SID>StripTrailingWhitespaces()

" On <Enter>, go to error and close quickfix list
au mitchellwrosen FileType qf nn <silent> <buffer> <CR> <CR>:ccl<CR>

au mitchellwrosen FileType unison setlocal commentstring=--\ %s

" Esc escapes terminal mode
au mitchellwrosen TermOpen * tno <buffer> <Esc> <C-\><C-n>
" forcibly exit a terminal buffer, because there's nothing to save
au mitchellwrosen TermOpen * nn <silent> <buffer> <Space>d :bw!<CR>

" Briefly highlight yanks
au mitchellwrosen TextYankPost * silent! lua vim.highlight.on_yank {higroup="IncSearch", timeout=500}

" Echo the quickfix entry on the current line, if any
" au CursorMoved * cal <SID>EchoQuickFixEntry()

" ==============================================================================
" Plugin settings
" ==============================================================================

" [ElmCast/elm-vim]
let g:elm_setup_keybindings = 0 " Don't make any key mappings
let g:elm_format_autosave = 1 " Run elm-format on save

" [godlygeek/tabular]
" Space-a to align on the word under the cursor
nn <silent> <Space>a m`:exe "Tabularize /" . expand("<cWORD>")<CR>``

" [junegunn/fzf.vim]
" If the buffer is already open in another tab or window, jump to it rather
" than replace the current buffer (which would open 2 copies)
let g:fzf_buffers_jump = 1
let g:fzf_layout = { 'window': { 'height': 0.9, 'width': 0.9 } }

" [junegunn/fzf.vim]
" Space-o ("open") to fuzzy file search, both git- and everything-variants
nn <expr> <Space>o (len(system('git rev-parse')) ? ':Files' : ':GFiles')."\<CR>"
" Space-f ("find") the word under the cursor
nn <Space>f :Rg <C-r><C-w><CR>
" Would be nice to do this without yanking?
vn <Space>f y:Rg <C-r>"<CR>
" Space-k (because it's a home-row key) to fuzzy-search buffers
nn <Space>k :Buffers<CR>
" Space-h to see the git history of the current file
nn <Space>h :BCommits<CR>

command! -bar BCommits call fzf#vim#buffer_commits(1)

command! -bar -nargs=? -complete=buffer Buffers
  \ call fzf#vim#buffers(
  \   <q-args>,
  \   fzf#vim#with_preview({'options': ['--info=inline', '--layout=reverse']}, 'down:60%'),
  \   0)

command! -nargs=? -complete=dir Files
  \ call fzf#vim#files(
  \   <q-args>,
  \   fzf#vim#with_preview({'options': ['--info=inline', '--layout=reverse']}, 'down:60%'),
  \   0)

command! -nargs=? GFiles
  \ call fzf#vim#gitfiles(
  \   <q-args>,
  \   fzf#vim#with_preview({'options': ['--info=inline', '--layout=reverse']}, 'down:60%'),
  \   0)

" Would be nice if '-1' worked here https://github.com/junegunn/fzf/issues/1750
" function! <SID>Rg(query)
"   let command_fmt = 'rg --column --line-number --no-heading --color=always -- %s || true'
"   let initial_command = printf(command_fmt, shellescape(a:query))
"   let reload_command = printf(command_fmt, '{q}')
"   let spec = {'options': ['-0', '-1', '--phony', '--query', a:query, '--bind', 'change:reload:'.reload_command]}
"   call fzf#vim#grep(initial_command, 1, fzf#vim#with_preview(spec), 1)
" endfunction
" command! -nargs=* Rg call <SID>Rg(<q-args>)

command! -nargs=* Rg
  \ call fzf#vim#grep(
  \   'rg --column --line-number --no-heading --color=always -- '.shellescape(<q-args>),
  \   1,
  \   fzf#vim#with_preview({'options': ['--border', '--info=inline', '--layout=reverse']}, 'down:60%'),
  \   0)

command! -nargs=* Rgu
  \ call fzf#vim#grep(
  \   'rg --line-number --multiline --multiline-dotall --no-heading --color=always -- '.shellescape(<q-args>),
  \   0,
  \   fzf#vim#with_preview({'options': ['--border', '--info=inline', '--layout=reverse']}, 'down:60%'),
  \   0)

au mitchellwrosen FileType fzf setl laststatus=0
  \| au BufLeave <buffer> setl laststatus=2
" Escape to quit little annoying temporary buffers
au mitchellwrosen FileType fzf nn <silent> <buffer> <Esc> :q<CR>
" Unmap Esc quitting terminal mode, so fzf handles it (result: one Esc closes fzf)
au mitchellwrosen FileType fzf tunma <buffer> <Esc>

" <Space>ff to find-function (ag can match over multiple lines)
" <Space>ft to find-type (ripgrep is faster)
au mitchellwrosen FileType haskell nn <buffer> <Space>ff :Ag (<Bslash>b)<C-r><C-w><Bslash>b[ <Bslash>t<Bslash>n]+::<CR>
au mitchellwrosen FileType haskell nn <buffer> <Space>ft :Rg (((data<Bar>newtype<Bar>type)\s+)<Bar>class .*)\b<C-r><C-w>\b<CR>
au mitchellwrosen FileType haskell nn <buffer> <Space>fa :Rgu (<C-r><C-w>\b\s+::)<Bar>((data(\sfamily)?<Bar>newtype<Bar>type(\sfamily)?)\s+<C-r><C-w>\b)<Bar>(class\s+(\(.*\)\s+=>\s+)?<C-r><C-w>\b\s+where)<CR>

" [itchyny/lightline.vim]
function! LightlineFilename()
  let filename = expand('%:t')
  let modified = &modified ? '+' : ''
  return filename . modified
endfunction

let g:lightline = {}
let g:lightline.active = {}
let g:lightline.active.left = [ [ 'mode', 'paste' ], [ 'branch' ] ]
let g:lightline.active.right = [ [ 'lineinfo' ], [ 'percent' ], [ 'filetype' ] ]
let g:lightline.colorscheme = 'gruvbox'
let g:lightline.component_expand = {}
let g:lightline.component_expand.buffers = 'lightline#bufferline#buffers'
let g:lightline.component_function = {}
let g:lightline.component_function.branch = 'FugitiveHead'
let g:lightline.component_function.filename = 'LightlineFilename'
let g:lightline.component_type = {}
let g:lightline.component_type.buffers = 'tabsel'
let g:lightline.mode_map = {
      \ 'C': 'ð¸â´ððð¶ðð¹',
      \ 'i': 'ð¾ððâ¯ðð',
      \ 'n': 'ðâ´ððð¶â',
      \ 'R': 'ðâ¯ðâð¶ð¸â¯',
      \ 'v': 'ðð¾ððð¶â',
      \ 'V': 'ðð¾ððð¶âââð¾ðâ¯',
      \ "\<C-v>": 'ðð¾ððð¶ââð·ââ´ð¸ð',
      \ }
let g:lightline.tab = {}
let g:lightline.tab.active = [ 'tabnum', 'filename', 'modified' ]
let g:lightline.tab.inactive = [ 'tabnum', 'filename', 'modified' ]
let g:lightline.tabline = {}
let g:lightline.tabline.left = [ [ 'buffers' ] ]
let g:lightline.tabline.right = [ [ ] ]

" [justinmk/vim-sneak]
" "clever" sneak - pressing z without moving the cursor will move to the next match
let g:sneak#s_next = 1
" Disable highlighting
hi! link Sneak None

nm : <Plug>Sneak_;
nm f <Plug>Sneak_f
nm F <Plug>Sneak_F
nm t <Plug>Sneak_t
nm t <Plug>Sneak_T
nm z <Plug>Sneak_s
nm Z <Plug>Sneak_S
vm z <Plug>Sneak_s
vm Z <Plug>Sneak_S
om z <Plug>Sneak_s
om Z <Plug>Sneak_S

" [liuchengxu/vim-which-key]
let g:which_key_use_floating_win = 1
let g:which_key_hspace = 1
cal which_key#register('<Space>', 'g:which_key_map_space')
let g:which_key_map_space = {
      \ 'a': 'align',
      \ 'b': 'git-blame',
      \ 'd': 'delete-buffer',
      \ 'f': 'find',
      \ 'h': 'history',
      \ 'k': 'find-buffer',
      \ 'm': 'comment',
      \ 'n': 'file-browser',
      \ 'o': 'find-file',
      \ 'S': 'repld-send-buffer',
      \ 's': 'repld-send',
      \ }
cal which_key#register('?', 'g:which_key_map_question')
" Why are some buffer things broken?
let g:which_key_map_question = {
      \ 'b':
      \   { 'name': '+buffer',
      \     'f': ['call feedkeys("<Space>k")', 'find-buffer (<Space>k)'],
      \     'p': ['<C-k>', 'prev-buffer (<C-k>)'],
      \     'n': ['<C-j>', 'next-buffer (<C-j>)'],
      \     'd': ['<Space>d', 'delete-buffer (<Space>d)'],
      \     's': ['<Tab>', 'swap-buffer (<Tab>)'],
      \   },
      \ 'e':
      \   { 'name': '+edit',
      \     'j': ['<C-s>', 'find-and-replace (<C-s>)'],
      \     'x':
      \       { 'name': '+exchange',
      \         'c': ['call feedkeys("xc")', 'exchange-clear (xc)'],
      \         'l': ['call feedkeys("xx")', 'exchange-line (xx)'],
      \         'w': ['call feedkeys("xw")', 'exchange-word (xw)'],
      \       },
      \   },
      \ 'w':
      \   { 'name': '+window',
      \     'h': ['<C-h>', 'window-left (<C-h>)'],
      \     'l': ['<C-l>', 'window-right (<C-l>)'],
      \   },
      \ 'Q': ['call feedkeys("@q")', 'execute-macro-q'],
      \ }

nn <silent> <Space> :WhichKey '<Space>'<CR>
vn <silent> <Space> :WhichKeyVisual '<Space>'<CR>
nn <silent> ? :WhichKey '?'<CR>

" [mcchrish/nnn.vim]
let g:nnn#set_default_mappings = 0
let g:nnn#command = 'nnn -c -n'
let g:nnn#layout = { 'window': { 'height': 0.9, 'width': 0.5, 'xoffset': 0.99 }}

" [mengelbrecht/lightline-bufferline]
let g:lightline#bufferline#modified = '+'

" [morhetz/gruvbox]
let g:gruvbox_italic = 1 " enable italics
let g:gruvbox_improved_strings = 1 " thought this was supposed to extra-highlight strings?

" [multiple-cursors]
let g:multi_cursor_use_default_mapping = 0
let g:multi_cursor_start_word_key = '<C-n>'
" let g:multi_cursor_select_all_word_key = '<A-n>'
" let g:multi_cursor_start_key = 'g<C-n>'
" let g:multi_cursor_select_all_key = 'g<A-n>'
let g:multi_cursor_next_key = '<C-n>'
let g:multi_cursor_prev_key = '<C-p>'
" let g:multi_cursor_skip_key = '<C-x>'
let g:multi_cursor_quit_key = '<Esc>'

" [neoclide/coc.nvim]
" <Left>/<Right> to jump around warnings/errors (annoying that it's only buffer-local)
nm <silent> <Left> <Plug>(coc-diagnostic-prev)
nm <silent> <Right> <Plug>(coc-diagnostic-next)
" gd to go to definition of thing under cursor
" Also <Del> (trying it out since it's one key)
nm <silent> gd <Plug>(coc-definition)
nm <silent> <Del> <Plug>(coc-definition)
" <Enter> to show type of thing under cursor
nn <silent> <Enter> :call <SID>HandleEnter()<CR>
" <Space>i to open quickfix
nn <silent> <Space>i :CocFix<CR>
" Backspace to open all warnings/errors in a list
nn <silent> <BS> :CocList diagnostics<CR>

function! s:HandleEnter()
  if coc#util#has_float()
    call coc#util#float_hide()
  else
    call CocAction('doHover')
  endif
endfunction

" [neovimhaskell/haskell-vim]
let g:haskell_indent_disable = 1
let g:haskell_enable_backpack = 1
let g:haskell_enable_pattern_synonyms = 1
let g:haskell_enable_quantification = 1
let g:haskell_enable_recursivedo = 1
let g:haskell_enable_typeroles = 1

" [romainl/vim-qf]
" Toggle the quickfix ("location") menu; move thru quickfix items with Alt+jk
" Hmm... I never seem to use these... do they even work? Wtf is quickfix?
nm <Space>l <Plug>(qf_qf_toggle)
nm <A-j> <Plug>(qf_qf_next)
nm <A-k> <Plug>(qf_qf_prev)

" [sdiehl/vim-ormolu]
let g:ormolu_disable = 1

au mitchellwrosen FileType haskell nn <buffer> <silent> <Space>p :call RunOrmolu()<CR>

" [mcchrish/nnn.vim]
nn <silent> <Space>n :NnnPicker<CR>

" [mhinz/signify]
let g:signify_sign_change = 'Î'
let g:signify_sign_delete = '-'
" I only use git, so only bother integrating with it (performance win!)
let g:signify_vcs_list = [ 'git' ]

" [mhinz/vim-startify]
let g:startify_custom_footer = ['   [e]  empty buffer', '   [q]  quit']
let g:startify_custom_header = []
let g:startify_custom_indices = ['a', 's', 'd', 'f', 'l', 'g', 'h', 'w', 'r', 'u', 'o', 'p', 't', 'y', 'z', 'x', 'c', 'v', 'm', ',', '.', '/', 'b', 'n', '1', '2', '3', '4', '5', '6']
let g:startify_enable_special = 0
" faster startup
let g:startify_enable_unsafe = 1
let g:startify_files_number = 30
let g:startify_lists = [{ 'type': 'files' }]
let g:startify_relative_path = 1

" make floaterm not leave an empty buffer in startify
" au User Startified setlocal buflisted

" In startify screen, undo my j=gj, k=gk mappings, because they press 'g'
au mitchellwrosen FileType startify nn <buffer> j j
au mitchellwrosen FileType startify nn <buffer> k k

" [psliwka/vim-smoothie]
let g:smoothie_base_speed = 15
let g:smoothie_no_default_mappings = 1
let g:smoothie_update_interval = 10

" very unfortunate: vm variants don't work here...
nm J <Plug>(SmoothieForwards)
nm K <Plug>(SmoothieBackwards)
vn J <C-D>
vn K <C-U>

" [rhysd/git-messenger.vim]
let g:git_messenger_always_into_popup = v:true
let g:git_messenger_extra_blame_args = '-w'
let g:git_messenger_no_default_mappings = v:true

" blame the line under the cursor
nm <Space>b <Plug>(git-messenger)

function! <SID>init_gitmessengerpopup() abort
  nm <buffer><Enter> q
  nm <buffer><Esc> q
  nm <buffer>h o
  nm <buffer>l O
endfunction
autocmd mitchellwrosen FileType gitmessengerpopup call <SID>init_gitmessengerpopup()

" [RRethy/vim-illuminate]
" highlight immediately
let g:Illuminate_delay = 0
" don't highlight the word under the cursor
let g:Illuminate_highlightUnderCursor = 0

" [tmsvg/pear-tree]
" look around to better balance parens rather than just always pairing
let g:pear_tree_smart_openers = 1
let g:pear_tree_smart_closers = 1
let g:pear_tree_smart_backspace = 1

" [tommcdo/vim-exchange]
" Don't make any key mappings
let g:exchange_no_mappings = 1

" x ("exchange") once to yank, x again to exchange with the first yank
nm x <Plug>(Exchange)
" Manually make [exhange] replace 'w' with 'e', as vim does for e.g. 'c'
nm xw <Plug>(Exchange)e
nm xW <Plug>(Exchange)E
" xx to exchange-yank the whole line (and return cursor to where it was)
nm xx m`<Plug>(ExchangeLine)``
" xc to clear the exchange
nm xc <Plug>(ExchangeClear)
vm x <Plug>(Exchange)

" [tpope/vim-commentary]
" Toggle comment
nm <Space>m <Plug>CommentaryLine
vm <Space>m <Plug>Commentary

" [tpope/vim-surround]
" Don't let surround provide any magic mappings
let g:surround_no_mappings = 1

" ds to delete surround and restore cursor position
" s to surround inner word and restore cursor position
" S to surround inner WORD and restore cursor position
" SS to surround current line restore cursor position
nm ds' mz<Plug>Dsurround'`zh
nm ds" mz<Plug>Dsurround"`zh
nm ds( mz<Plug>Dsurround)`zh
nm ds[ mz<Plug>Dsurround]`zh
nm ds{ mz<Plug>Dsurround}`zh
nm dsp mz<Plug>Dsurround)`zh
nm ds<Space> mz<Plug>Dsurround <Space>`zh
nm s' mz<Plug>Csurround w'`zl
nm s" mz<Plug>Csurround w"`zl
nm s( mz<Plug>Csurround w)`zl
nm s[ mz<Plug>Csurround w]`zl
nm s{ mz<Plug>Csurround w}`zl
nm sp mz<Plug>Csurround w)`zl
nm s<Space> mz<Plug>Csurround w <Space>`zl
nm S' mz<Plug>Csurround W'`zl
nm S" mz<Plug>Csurround W"`zl
nm S( mz<Plug>Csurround W)`zl
nm S[ mz<Plug>Csurround W]`zl
nm S{ mz<Plug>Csurround W}`zl
nm Sp mz<Plug>Csurround W)`zl
nm S<Space> mz<Plug>Csurround W <Space>`zl
nm SS' mz<Plug>Yssurround'`z
nm SS" mz<Plug>Yssurround"`z
nm SS( mz<Plug>Yssurround)`z
nm SS[ mz<Plug>Yssurround]`z
nm SS{ mz<Plug>Yssurround}`z
nm SSp mz<Plug>Yssurround)`z
vm s' <Plug>VSurround'
vm s" <Plug>VSurround"
vm s( <Plug>VSurround)
vm s[ <Plug>VSurround]
vm s{ <Plug>VSurround}
vm sp <Plug>VSurround)

" [unblevable/quick-scope]
" let g:qs_lazy_highlight = 1 " only kick in after updatetime ms
let g:qs_max_chars = 120

" [voldikss/vim-floaterm]
" let g:floaterm_autoclose = 2
" let g:floaterm_title = ''
" nn <Space>tl :FloatermNew --height=0.9 --position=right --width=0.5<CR>
" nn <silent> <Space>tt :Tt --height=0.9 --position=right --width=0.5<CR>

" au mitchellwrosen FileType floaterm nn <buffer> <silent> <C-j> :FloatermNext<CR>
" au mitchellwrosen FileType floaterm nn <buffer> <silent> <C-k> :FloatermPrev<CR>

" [wellle/targets.vim]
nm cil9 cil)
nm cil0 cil)
nm cin9 cin)
nm cin0 cin)

" [Yggdroot/indentLine]
let g:indentLine_color_term = 239
let g:indentLine_char = 'â'

" ==============================================================================
" nvim-gtk settings
" ==============================================================================

if exists('g:GtkGuiLoaded')
  cal rpcnotify(1, 'Gui', 'Font', 'PragmataPro Mono Liga 18')
endif

" ==============================================================================

" Notes to myself:
"
" 'o' in visual swaps cursor location
" g<C-a> in visual mode turns 1\n1\n1\n1 into 2\n3\n4\n5
" gi
" gv

" ==============================================================================
" Unicode goodies
" ==============================================================================

"       â¼  Controls and Latin-1 Suppl.
"  U+00A0    Â¡ Â¢ Â£ Â¤ Â¥ Â¦ Â§ Â¨ Â© Âª Â« Â¬ Â­ Â® Â¯

ino <C-u>! Â¡
ino <C-u>cent Â¢
ino <C-u>pound Â£
ino <C-u>currency Â¤
ino <C-u>yen Â¥
ino <C-u>brokenbar Â¦
ino <C-u>section Â§
ino <C-u>diaeresis Â¨
ino <C-u>copyright Â©
ino <C-u>fordinal Âª
ino <C-u><<" Â«
ino <C-u>not Â¬
ino <C-u>softhyphen Â­
ino <C-u>registered Â®
ino <C-u>macron Â¯

"  U+00B0  Â° Â± Â² Â³ Â´ Âµ Â¶ Â· Â¸ Â¹ Âº Â» Â¼ Â½ Â¾ Â¿

ino <C-u>degree Â°
ino <C-u>plusminus Â±
ino <C-u>^2 Â²
ino <C-u>^3 Â³
ino <C-u>` Â´
ino <C-u>micro Âµ
ino <C-u>pilcrow Â¶
ino <C-u>middledot Â·
ino <C-u>cedilla Â¸
ino <C-u>^1 Â¹
ino <C-u>mordinal Âº
ino <C-u>>>" Â»
ino <C-u>1/4 Â¼
ino <C-u>1/2 Â½
ino <C-u>3/4 Â¾
ino <C-u>? Â¿

"  U+00C0  Ã Ã Ã Ã Ã Ã Ã Ã Ã Ã Ã Ã Ã Ã Ã Ã

" ino <C-u>graveA Ã
" ino <C-u>acuteA Ã
" ino <C-u>circumflexA Ã
" ino <C-u>tildeA Ã
" ino <C-u>diaeresisA Ã
" ino <C-u>ringA Ã
" ino <C-u>AE Ã
" ino <C-u>cedillaC Ã
" ino <C-u>graveE Ã
" ino <C-u>acuteE Ã
" ino <C-u>circumflexE Ã
" ino <C-u>diaeresisE Ã
" ino <C-u>graveI Ã
" ino <C-u>acuteI Ã
" ino <C-u>circumflexI Ã
" ino <C-u>diaeresisI Ã

"  U+00D0  Ã Ã Ã Ã Ã Ã Ã Ã Ã Ã Ã Ã Ã Ã Ã Ã

" ino <C-u>Eth Ã
" ino <C-u>tildeN Ã
" ino <C-u>graveO Ã
" ino <C-u>acuteO Ã
" ino <C-u>circumflexO Ã
" ino <C-u>tildeO Ã
" ino <C-u>diaeresisO Ã
ino <C-u>mult Ã
" ino <C-u>strokeO Ã
" ino <C-u>graveU Ã
" ino <C-u>acuteU Ã
" ino <C-u>circumflexU Ã
" ino <C-u>diaeresisU Ã
" ino <C-u>acuteY Ã
" ino <C-u>Thorn Ã
" ino <C-u>eszett Ã

"  U+00E0  Ã  Ã¡ Ã¢ Ã£ Ã¤ Ã¥ Ã¦ Ã§ Ã¨ Ã© Ãª Ã« Ã¬ Ã­ Ã® Ã¯

" ino <C-u>gravea Ã 
" ino <C-u>acutea Ã¡
" ino <C-u>circumflexa Ã¢
" ino <C-u>tildea Ã£
" ino <C-u>diaeresisa Ã¤
" ino <C-u>ringa Ã¥
ino <C-u>ae Ã¦
" ino <C-u>cedillac Ã§
" ino <C-u>gravee Ã¨
" ino <C-u>acutee Ã©
" ino <C-u>circumflexe Ãª
" ino <C-u>diaeresise Ã«
" ino <C-u>gravei Ã¬
" ino <C-u>acutei Ã­
" ino <C-u>circumflexi Ã®
" ino <C-u>diaeresisi Ã¯

"  U+00F0  Ã° Ã± Ã² Ã³ Ã´ Ãµ Ã¶ Ã· Ã¸ Ã¹ Ãº Ã» Ã¼ Ã½ Ã¾ Ã¿

" ino <C-u>eth Ã°
" ino <C-u>tilden Ã±
" ino <C-u>graveo Ã²
" ino <C-u>acuteo Ã³
" ino <C-u>circumflexo Ã´
" ino <C-u>tildeo Ãµ
" ino <C-u>diaeresiso Ã¶
ino <C-u>div Ã·
" ino <C-u>strokeo Ã¸
" ino <C-u>graveu Ã¹
" ino <C-u>acuteu Ãº
" ino <C-u>circumflexu Ã»
" ino <C-u>diaeresisu Ã¼
" ino <C-u>acutey Ã½
" ino <C-u>thorn Ã¾
" ino <C-u>diaeresisy Ã¿

"       â¼  Latin Extended-A
"  U+0100  Ä Ä Ä Ä Ä Ä Ä Ä Ä Ä Ä Ä Ä Ä Ä Ä

" ino <C-u>macronA Ä
" ino <C-u>macrona Ä
" ino <C-u>breveA Ä
" ino <C-u>brevea Ä
" ino <C-u>ogonekA Ä
" ino <C-u>ogoneka Ä
" ino <C-u>acuteC Ä
" ino <C-u>acutec Ä
" ino <C-u>circumflexC Ä
" ino <C-u>circumflexc Ä
" ino <C-u>dotC Ä
" ino <C-u>dotc Ä
" ino <C-u>caronC Ä
" ino <C-u>caronc Ä
" ino <C-u>caronD Ä
" ino <C-u>carond Ä

"  U+0110  Ä Ä Ä Ä Ä Ä Ä Ä Ä Ä Ä Ä Ä Ä Ä Ä

" ino <C-u>strokeD Ä
" ino <C-u>stroked Ä
" ino <C-u>macronE Ä
" ino <C-u>macrone Ä
" ino <C-u>breveE Ä
" ino <C-u>brevee Ä
" ino <C-u>dotE Ä
" ino <C-u>dote Ä
" ino <C-u>ogonekE Ä
" ino <C-u>ogoneke Ä
" ino <C-u>caronE Ä
" ino <C-u>carone Ä
" ino <C-u>circumflexG Ä
" ino <C-u>circumflexg Ä
" ino <C-u>breveG Ä
" ino <C-u>breveg Ä

"  U+0120  Ä  Ä¡ Ä¢ Ä£ Ä¤ Ä¥ Ä¦ Ä§ Ä¨ Ä© Äª Ä« Ä¬ Ä­ Ä® Ä¯

" ino <C-u>dotG Ä 
" ino <C-u>dotg Ä¡
" ino <C-u>cedillaG Ä¢
" ino <C-u>cedillag Ä£
" ino <C-u>circumflexH Ä¤
" ino <C-u>circumflexh Ä¥
" ino <C-u>strokeH Ä¦
" ino <C-u>strokeh Ä§
" ino <C-u>tildeI Ä¨
" ino <C-u>tildei Ä©
" ino <C-u>macronI Äª
" ino <C-u>macroni Ä«
" ino <C-u>breveI Ä¬
" ino <C-u>brevei Ä­
" ino <C-u>ogonekI Ä®
" ino <C-u>ogoneki Ä¯

"  U+0130  Ä° Ä± Ä² Ä³ Ä´ Äµ Ä¶ Ä· Ä¸ Ä¹ Äº Ä» Ä¼ Ä½ Ä¾ Ä¿

" ino <C-u>dotI Ä°
" ino <C-u>dotlessi Ä±
" ino <C-u>IJ Ä²
" ino <C-u>ij Ä³
" ino <C-u>circumflexJ Ä´
" ino <C-u>circumflexj Äµ
" ino <C-u>cedillaK Ä¶
" ino <C-u>cedillak Ä·
" ino <C-u>kra Ä¸
" ino <C-u>acuteL Ä¹
" ino <C-u>acutel Äº
" ino <C-u>cedillaL Ä»
" ino <C-u>cedillal Ä¼
" ino <C-u>caronL Ä½
" ino <C-u>caronl Ä¾
" ino <C-u>middledotL Ä¿

"  U+0140  Å Å Å Å Å Å Å Å Å Å Å Å Å Å Å Å

" ino <C-u>middledotl Å
" ino <C-u>strokeL Å
" ino <C-u>strokel Å
" ino <C-u>acuteN Å
" ino <C-u>acuten Å
" ino <C-u>cedillaN Å
" ino <C-u>cedillan Å
" ino <C-u>caronN Å
" ino <C-u>caronn Å
" ino <C-u>apostrophen Å
" ino <C-u>Eng Å
" ino <C-u>eng Å
" ino <C-u>macronO Å
" ino <C-u>macrono Å
" ino <C-u>breveO Å
" ino <C-u>breveo Å

"  U+0150  Å Å Å Å Å Å Å Å Å Å Å Å Å Å Å Å

" ino <C-u>dacuteO Å
" ino <C-u>dacuteo Å
" ino <C-u>OE Å
" ino <C-u>oe Å
" ino <C-u>acuteR Å
" ino <C-u>acuter Å
" ino <C-u>cedillaR Å
" ino <C-u>cedillar Å
" ino <C-u>caronR Å
" ino <C-u>caronr Å
" ino <C-u>acuteS Å
" ino <C-u>acutes Å
" ino <C-u>circumflexS Å
" ino <C-u>circumflexs Å
" ino <C-u>cedillaS Å
" ino <C-u>cedillas Å

"  U+0160  Å  Å¡ Å¢ Å£ Å¤ Å¥ Å¦ Å§ Å¨ Å© Åª Å« Å¬ Å­ Å® Å¯

" ino <C-u>caronS Å 
" ino <C-u>carons Å¡
" ino <C-u>cedillaT Å¢
" ino <C-u>cedillat Å£
" ino <C-u>caronT Å¤
" ino <C-u>caront Å¥
" ino <C-u>strokeT Å¦
" ino <C-u>stroket Å§
" ino <C-u>tildeU Å¨
" ino <C-u>tildeu Å©
" ino <C-u>macronU Åª
" ino <C-u>macronu Å«
" ino <C-u>breveU Å¬
" ino <C-u>breveu Å­
" ino <C-u>ringU Å®
" ino <C-u>ringu Å¯

"  U+0170  Å° Å± Å² Å³ Å´ Åµ Å¶ Å· Å¸ Å¹ Åº Å» Å¼ Å½ Å¾ Å¿

" ino <C-u>dacuteU Å°
" ino <C-u>dacuteu Å±
" ino <C-u>ogonekU Å²
" ino <C-u>ogoneku Å³
" ino <C-u>circumflexW Å´
" ino <C-u>circumflexw Åµ
" ino <C-u>circumflexY Å¶
" ino <C-u>circumflexy Å·
" ino <C-u>diaeresisY Å¸
" ino <C-u>acuteZ Å¹
" ino <C-u>acutez Åº
" ino <C-u>dotZ Å»
" ino <C-u>dotz Å¼
" ino <C-u>caronZ Å½
" ino <C-u>caronz Å¾
" ino <C-u>shorts Å¿

"       â¼  Latin Extended-B
"  U+0180  Æ Æ Æ Æ Æ Æ Æ Æ Æ Æ Æ Æ Æ Æ Æ Æ
"  U+0190  Æ Æ Æ Æ Æ Æ Æ Æ Æ Æ Æ Æ Æ Æ Æ Æ
"  U+01A0  Æ  Æ¡ Æ¢ Æ£ Æ¤ Æ¥ Æ¦ Æ§ Æ¨ Æ© Æª Æ« Æ¬ Æ­ Æ® Æ¯
"  U+01B0  Æ° Æ± Æ² Æ³ Æ´ Æµ Æ¶ Æ· Æ¸ Æ¹ Æº Æ» Æ¼ Æ½ Æ¾ Æ¿
"  U+01C0  Ç Ç Ç Ç Ç Ç Ç Ç Ç Ç Ç Ç Ç Ç Ç Ç
"  U+01D0  Ç Ç Ç Ç Ç Ç Ç Ç Ç Ç Ç Ç Ç Ç Ç Ç
"  U+01E0  Ç  Ç¡ Ç¢ Ç£ Ç¤ Ç¥ Ç¦ Ç§ Ç¨ Ç© Çª Ç« Ç¬ Ç­ Ç® Ç¯
"  U+01F0  Ç° Ç± Ç² Ç³ Ç´ Çµ Ç¶ Ç· Ç¸ Ç¹ Çº Ç» Ç¼ Ç½ Ç¾ Ç¿
"  U+0200  È È È È È È È È È È È È È È È È
"  U+0210  È È È È È È È È È È È È È È È È
"  U+0220  È  È¡ È¢ È£ È¤ È¥ È¦ È§ È¨ È© Èª È« È¬ È­ È® È¯
"  U+0230  È° È± È² È³ È´ Èµ È¶ È· È¸ È¹ Èº È» È¼ È½ È¾ È¿
"  U+0240  É É É É É É É É É É É É É É É É

"       â¼  IPA Extensions
"  U+0250  É É É É É É É É É É É É É É É É
"  U+0260  É  É¡ É¢ É£ É¤ É¥ É¦ É§ É¨ É© Éª É« É¬ É­ É® É¯
"  U+0270  É° É± É² É³ É´ Éµ É¶ É· É¸ É¹ Éº É» É¼ É½ É¾ É¿
"  U+0280  Ê Ê Ê Ê Ê Ê Ê Ê Ê Ê Ê Ê Ê Ê Ê Ê
"  U+0290  Ê Ê Ê Ê Ê Ê Ê Ê Ê Ê Ê Ê Ê Ê Ê Ê
"  U+02A0  Ê  Ê¡ Ê¢ Ê£ Ê¤ Ê¥ Ê¦ Ê§ Ê¨ Ê© Êª Ê« Ê¬ Ê­ Ê® Ê¯

"       â¼  Spacing Modifier Letters
"  U+02B0  Ê° Ê± Ê² Ê³ Ê´ Êµ Ê¶ Ê· Ê¸ Ê¹ Êº Ê» Ê¼ Ê½ Ê¾ Ê¿
"  U+02C0  Ë Ë Ë Ë Ë Ë Ë Ë Ë Ë Ë Ë Ë Ë Ë Ë
"  U+02D0  Ë Ë Ë Ë Ë Ë Ë Ë Ë Ë Ë Ë Ë Ë Ë Ë
"  U+02E0  Ë  Ë¡ Ë¢ Ë£ Ë¤ Ë¥ Ë¦ Ë§ Ë¨ Ë© Ëª Ë« Ë¬ Ë­ Ë® Ë¯
"  U+02F0  Ë° Ë± Ë² Ë³ Ë´ Ëµ Ë¶ Ë· Ë¸ Ë¹ Ëº Ë» Ë¼ Ë½ Ë¾ Ë¿

"       â¼  Greek and Coptic
"  U+0380      Î Î Î Â· Î Î Î  Î  Î Î

"  U+0390  Î Î Î Î Î Î Î Î Î Î Î Î Î Î Î Î

ino <C-u>Gamma Î
ino <C-u>Delta Î
ino <C-u>Theta Î
ino <C-u>Lambda Î
ino <C-u>Xi Î

"  U+03A0  Î  Î¡   Î£ Î¤ Î¥ Î¦ Î§ Î¨ Î© Îª Î« Î¬ Î­ Î® Î¯

ino <C-u>Pi Î 
ino <C-u>Sigma Î£
ino <C-u>Upsilon Î¥
ino <C-u>Phi Î¦
ino <C-u>Psi Î¨
ino <C-u>Omega Î©

"  U+03B0  Î° Î± Î² Î³ Î´ Îµ Î¶ Î· Î¸ Î¹ Îº Î» Î¼ Î½ Î¾ Î¿

ino <C-u>alpha Î±
ino <C-u>beta Î²
ino <C-u>gamma Î³
ino <C-u>delta Î´
ino <C-u>epsilon Îµ
ino <C-u>zeta Î¶
ino <C-u>eta Î·
ino <C-u>theta Î¸
ino <C-u>iota Î¹
ino <C-u>kappa Îº
ino <C-u>lambda Î»
ino <C-u>mu Î¼
ino <C-u>nu Î½
ino <C-u>xi Î¾

"  U+03C0  Ï Ï Ï Ï Ï Ï Ï Ï Ï Ï Ï Ï Ï Ï Ï

ino <C-u>pi Ï
ino <C-u>rho Ï
ino <C-u>sigma Ï
ino <C-u>tau Ï
ino <C-u>upsilon Ï
ino <C-u>phi Ï
ino <C-u>chi Ï
ino <C-u>psi Ï
ino <C-u>omega Ï

"  U+03D0  Ï Ï   Ï Ï               Ï Ï
"  U+03F0  Ï° Ï±   Ïµ


"       â¼  Phonetic extensions
"  U+1D00  á´ á´ á´ á´ á´ á´ á´ á´ á´ á´ á´ á´ á´ á´ á´ á´
"  U+1D10  á´ á´ á´ á´ á´ á´ á´ á´ á´ á´ á´ á´ á´ á´ á´ á´
"  U+1D20  á´  á´¡ á´¢ á´£ á´¤ á´¥ á´¦ á´§ á´¨ á´© á´ª á´« á´¬ á´­ á´® á´¯

ino <C-u>^A á´¬
ino <C-u>^B á´®

"  U+1D30  á´° á´± á´² á´³ á´´ á´µ á´¶ á´· á´¸ á´¹ á´º á´» á´¼ á´½ á´¾ á´¿

ino <C-u>^D á´°
ino <C-u>^E á´±
ino <C-u>^G á´³
ino <C-u>^H á´´
ino <C-u>^I á´µ
ino <C-u>^J á´¶
ino <C-u>^K á´·
ino <C-u>^L á´¸
ino <C-u>^M á´¹
ino <C-u>^N á´º
ino <C-u>^O á´¼
ino <C-u>^P á´¾
ino <C-u>^R á´¿

"  U+1D40  áµ áµ áµ áµ áµ áµ áµ áµ áµ áµ áµ áµ áµ áµ áµ áµ

ino <C-u>^T áµ
ino <C-u>^U áµ
ino <C-u>^W áµ
ino <C-u>^a áµ
ino <C-u>^alpha áµ
ino <C-u>^b áµ
ino <C-u>^d áµ
ino <C-u>^e áµ
ino <C-u>^g áµ
ino <C-u>^k áµ

"  U+1D50  áµ áµ áµ áµ áµ áµ áµ áµ áµ áµ áµ áµ áµ áµ áµ áµ

ino <C-u>^m áµ
ino <C-u>^o áµ
ino <C-u>^p áµ
ino <C-u>^t áµ
ino <C-u>^u áµ
ino <C-u>^v áµ
ino <C-u>^beta áµ
ino <C-u>^gamma áµ
ino <C-u>^delta áµ

"  U+1D60  áµ  áµ¡ áµ¢ áµ£ áµ¤ áµ¥ áµ¦ áµ§ áµ¨ áµ© áµª áµ« áµ¬ áµ­ áµ® áµ¯

ino <C-u>^phi áµ 
ino <C-u>^chi áµ¡
ino <C-u>_i áµ¢
ino <C-u>_r áµ£
ino <C-u>_u áµ¤
ino <C-u>_v áµ¥
ino <C-u>_beta áµ¦
ino <C-u>_gamma áµ§
ino <C-u>_rho áµ¨
ino <C-u>_phi áµ©
ino <C-u>_chi áµª

"  U+1D70  áµ° áµ± áµ² áµ³ áµ´ áµµ áµ¶ áµ· áµ¸ áµ¹ áµº áµ» áµ¼ áµ½ áµ¾ áµ¿

"       â¼  General Punctuation
"  U+2000
"  U+2010  â â â â â â â â â â â â â â â â
"  U+2020  â  â¡ â¢ â£ â¤ â¥ â¦ â§

"  U+2030  â° â± â² â³ â´ âµ â¶ â· â¸ â¹ âº â» â¼ â½ â¾ â¿

ino <C-u>!! â¼

"  U+2040  â â â â â â â â â â â â â â â â

ino <C-u>?? â
ino <C-u>?! â
ino <C-u>!? â
ino <C-u>_* â

"  U+2050  â â â â â â â â â â â â â â â
"  U+2060

"       â¼  Superscripts and Subscripts
"  U+2070  â° â±   â´ âµ â¶ â· â¸ â¹ âº â» â¼ â½ â¾ â¿

ino <C-u>^0 â°
ino <C-u>^i â±
ino <C-u>^4 â´
ino <C-u>^5 âµ
ino <C-u>^6 â¶
ino <C-u>^7 â·
ino <C-u>^8 â¸
ino <C-u>^9 â¹
ino <C-u>^+ âº
ino <C-u>^- â»
ino <C-u>^= â¼
ino <C-u>^( â½
ino <C-u>^) â¾
ino <C-u>^n â¿

"  U+2080  â â â â â â â â â â â â â â â

ino <C-u>_0 â
ino <C-u>_1 â
ino <C-u>_2 â
ino <C-u>_3 â
ino <C-u>_4 â
ino <C-u>_5 â
ino <C-u>_6 â
ino <C-u>_7 â
ino <C-u>_8 â
ino <C-u>_9 â
ino <C-u>_+ â
ino <C-u>_- â
ino <C-u>_= â
ino <C-u>_( â
ino <C-u>_) â

"  U+2090  â â â â â â â â â â â â â

ino <C-u>_a â
ino <C-u>_e â
ino <C-u>_o â
ino <C-u>_x â
ino <C-u>_h â
ino <C-u>_k â
ino <C-u>_l â
ino <C-u>_m â
ino <C-u>_n â
ino <C-u>_p â
ino <C-u>_s â
ino <C-u>_t â

"       â¼  Currency Symbols
"  U+20A0            âª â« â¬
"  U+20B0        â½

"       â¼  Letterlike Symbols
"  U+2100  â â â â â â â â â â â â â â â â

ino <C-U>euler â

"  U+2110  â â â â â â â â â â â â â â â â

"  U+2120  â  â¡ â¢ â£ â¤ â¥ Î© â§ â¨ â© K Ã â¬ â­ â® â¯

ino <C-U>tm â¢

"  U+2130  â° â± â² â³ â´ âµ â¶ â· â¸ â¹ âº â» â¼ â½ â¾ â¿

ino <C-U>info â¹
ino <C-U>[pi â¼
ino <C-U>[gamma â½
ino <C-U>[Gamma â¾
ino <C-U>[Pi â¿

"  U+2140  â â â â â â â â â â â â â â â â

ino <C-U>[nsumm â
ino <C-U>[/D â
ino <C-U>[/d â
ino <C-U>[/e â
ino <C-U>[/i â
ino <C-U>[/j â

"       â¼  Number Forms
"  U+2150  â â â â â â â â â â â â â â â â

ino <C-U>1/7 â
ino <C-U>1/9 â
ino <C-U>1/10 â
ino <C-U>1/3 â
ino <C-U>2/3 â
ino <C-U>1/5 â
ino <C-U>2/5 â
ino <C-U>3/5 â
ino <C-U>4/5 â
ino <C-U>1/6 â
ino <C-U>5/6 â
ino <C-U>1/8 â
ino <C-U>3/8 â
ino <C-U>5/8 â
ino <C-U>7/8 â

"  U+2160  â  â¡ â¢ â£ â¤ â¥ â¦ â§ â¨ â© âª â« â¬ â­ â® â¯

ino <C-U>romanI â 
ino <C-U>romanII â¡
ino <C-U>romanIII â¢
ino <C-U>romanIV â£
ino <C-U>romanV â¤
ino <C-U>romanVI â¥
ino <C-U>romanVII â¦
ino <C-U>romanVIII â§
ino <C-U>romanIX â¨
ino <C-U>romanX â©
ino <C-U>romanXI âª
ino <C-U>romanXII â«
ino <C-U>romanL â¬
ino <C-U>romanC â­
ino <C-U>romanD â®
ino <C-U>romanM â¯

"  U+2170  â° â± â² â³ â´ âµ â¶ â· â¸ â¹ âº â» â¼ â½ â¾ â¿

ino <C-U>romani â°
ino <C-U>romanii â±
ino <C-U>romaniii â²
ino <C-U>romaniv â³
ino <C-U>romanv â´
ino <C-U>romanvi âµ
ino <C-U>romanvii â¶
ino <C-U>romanviii â·
ino <C-U>romanix â¸
ino <C-U>romanx â¹
ino <C-U>romanxi âº
ino <C-U>romanxii â»
ino <C-U>romanl â¼
ino <C-U>romanc â½
ino <C-U>romand â¾
ino <C-U>romanm â¿

"  U+2180  â â â â â â â â â â â â


"       â¼  Arrows
"  U+2190  â â â â â â â â â â â â â â â â

ino <C-U><- â
ino <C-U>-^ â
ino <C-U>-> â
ino <C-U>-v â
ino <C-U><~ â
ino <C-U>~> â
ino <C-U><<- â
ino <C-U>-^^ â

"  U+21A0  â  â¡ â¢ â£ â¤ â¥ â¦ â§ â¨ â© âª â« â¬ â­ â® â¯

ino <C-U>->> â 
ino <C-U>-vv â¡
ino <C-U><-( â¢
ino <C-U>)-> â£
ino <C-U><-<Bar> â¤
ino <C-U><Bar>-^ â¥
ino <C-U><Bar>-> â¦
ino <C-U><Bar>-v â§
ino <C-U></ â©
ino <C-U>\> âª

"  U+21B0  â° â± â² â³ â´ âµ â¶ â· â¸ â¹ âº â» â¼ â½ â¾ â¿
"  U+21C0  â â â â â â â â â â â â â â â â

"  U+21D0  â â â â â â â â â â â â â â â â
ino <C-U><= â
ino <C-U>=^ â
ino <C-U>=> â
ino <C-U>=v â
ino <C-U><=> â
ino <C-U>^=v â

"  U+21E0  â  â¡ â¢ â£ â¤ â¥ â¦ â§ â¨ â© âª â« â¬ â­ â® â¯
"  U+21F0  â° â± â² â³ â´ âµ â¶ â· â¸ â¹ âº â» â¼ â½ â¾ â¿

"       â¼  Mathematical Operators
"  U+2200  â â â â â â â â â â â â â â â â

ino <C-u>forall â
ino <C-u>complement â
ino <C-u>pdiff â
ino <C-u>exists â
ino <C-u>nexists â
ino <C-u>empty â
ino <C-u>incr â
ino <C-u>nabla â
ino <C-u>elem â
ino <C-u>nelem â
ino <C-u>selem â
ino <C-u>contains â
ino <C-u>ncontains â
ino <C-u>scontains â
ino <C-u>endofproof â
ino <C-u>nproduct â

"  U+2210  â â â â â â â â â â â â â â â â

ino <C-u>ncoproduct â
ino <C-u>nsum â
ino <C-u>minus â
ino <C-u>minusplus â
ino <C-u>dotplus â
ino <C-u>divslash â
ino <C-u>setminus â
ino <C-u>asterisk â
ino <C-u>ring â
ino <C-u>bullet â
ino <C-u>root2 â
ino <C-u>root3 â
ino <C-u>root4 â
ino <C-u>proportional â
ino <C-u>infinity â
ino <C-u>rangle â

"  U+2220  â  â¡ â¢ â£ â¤ â¥ â¦ â§ â¨ â© âª â« â¬ â­ â® â¯

ino <C-u>angle â 
ino <C-u>mangle â¡
ino <C-u>sangle â¢
ino <C-u>divides â£
ino <C-u>ndivides â¤
ino <C-u>parallel â¥
ino <C-u>nparallel â¦
ino <C-u>and â§
ino <C-u>or â¨
ino <C-u>intersection â©
ino <C-u>union âª
ino <C-u>integral â«
ino <C-u>integral2 â¬
ino <C-u>integral3 â­

"  U+2230  â° â± â² â³ â´ âµ â¶ â· â¸ â¹ âº â» â¼ â½ â¾ â¿

ino <C-u>therefore â´
ino <C-u>because âµ
ino <C-u>ratio â¶
ino <C-u>proportion â·
ino <C-u>:: â·
ino <C-u>dotminus â¸
ino <C-u>excess â¹
ino <C-u>gproportion âº
ino <C-u>homothetic â»
ino <C-u>~ â¼
ino <C-U>rtilde â½
ino <C-U>sine â¿

"  U+2240  â â â â â â â â â â â â â â â â

ino <C-U>wreath â
ino <C-U>/~ â
ino <C-U>-~ â
ino <C-U>~- â
ino <C-U>/~- â
ino <C-U>~= â
ino <C-U>~/= â
ino <C-U>/~= â
ino <C-U>~~ â
ino <C-U>/~~ â
ino <C-U>~~- â
ino <C-U>~~~ â

"  U+2250  â â â â â â â â â â â â â â â â

ino <C-U>:= â
ino <C-U>=: â
ino <C-U>def= â
ino <C-U>?= â

"  U+2260  â  â¡ â¢ â£ â¤ â¥ â¦ â§ â¨ â© âª â« â¬ â­ â® â¯

ino <C-U>/= â 
ino <C-U>=3 â¡
ino <C-U>/=3 â¢
ino <C-U>=4 â£
ino <C-U>=< â¤
ino <C-U>>= â¥
ino <C-U><< âª
ino <C-U>>> â«
ino <C-U>/< â®
ino <C-U>/> â¯

"  U+2270  â° â± â² â³ â´ âµ â¶ â· â¸ â¹ âº â» â¼ â½ â¾ â¿

ino <C-U>/=< â°
ino <C-U>/>= â±

"  U+2280  â â â â â â â â â â â â â â â â

ino <C-U>psubset â
ino <C-U>psuperset â
ino <C-U>/psubset â
ino <C-U>/psuperset â
ino <C-U>subset â
ino <C-U>superset â
ino <C-U>/subset â
ino <C-U>/superset â
ino <C-U>multiset â
ino <C-U>multisetmult â
ino <C-U>multisetunion â

"  U+2290  â â â â â â â â â â â â â â â â

ino <C-U>o+ â
ino <C-U>o- â
ino <C-U>ox â
ino <C-U>o/ â
ino <C-U>o. â
ino <C-U>oo â
ino <C-U>o* â
ino <C-U>o= â
ino <C-U>s+ â
ino <C-U>s- â

"  U+22A0  â  â¡ â¢ â£ â¤ â¥ â¦ â§ â¨ â© âª â« â¬ â­ â® â¯

ino <C-U>sx â 
ino <C-U>s. â¡
ino <C-U>top â¤
ino <C-U>bottom â¥

"  U+22B0  â° â± â² â³ â´ âµ â¶ â· â¸ â¹ âº â» â¼ â½ â¾ â¿

ino <C-U>-o â¸
ino <C-U>xor â»
ino <C-U>nand â¼
ino <C-U>nor â½

"  U+22C0  â â â â â â â â â â â â â â â â

ino <C-U>n-and â
ino <C-U>n-or â
ino <C-U>n-intersect â
ino <C-U>n-union â
ino <C-U>diamond â
ino <C-U>dot â
ino <C-U>star â
ino <C-U>bowtie â
ino <C-U>cor â
ino <C-U>cand â

"  U+22D0  â â â â â â â â â â â â â â â â

ino <C-U><<< â
ino <C-U>>>> â

"  U+22E0  â  â¡ â¢ â£ â¤ â¥ â¦ â§ â¨ â© âª â« â¬ â­ â® â¯
"  U+22F0  â° â± â² â³ â´ âµ â¶ â· â¸ â¹ âº â» â¼ â½ â¾ â¿

"       â¼  Miscellaneous Technical
"  U+2300  â â â â â â â â â â â â â â â â
"  U+2310  â â â â â â â â â â â â â â â â
"  U+2320  â  â¡ â¢ â£ â¤ â¥ â¦ â§ â¨ ã ã â« â¬
"  U+2330      â´  â¶ â· â¸ â¹ âº â» â¼ â½ â¾ â¿
"  U+2340  â â â â â â â â â â â â â â â â
"  U+2350  â â â â â â â â â â â â â â â â
"  U+2360  â  â¡ â¢ â£ â¤ â¥ â¦ â§ â¨ â© âª â« â¬ â­ â® â¯
"  U+2370  â° â± â² â³ â´ âµ â¶ â· â¸ â¹ âº   â½
"  U+2380  â â â â â â â â â â â â â â â â
"  U+2390  â â â â â â â â â â â â â â â â
"  U+23A0  â  â¡ â¢ â£ â¤ â¥ â¦ â§ â¨ â© âª â« â¬ â­ â® â¯
"  U+23B0  â° â± â² â³ â´ âµ â¶ â· â¸ â¹ âº â» â¼ â½
"  U+23C0                â
"  U+23D0  â                       â â â â
"  U+23E0  â  â¡
"  U+23F0        â³             â» â¼ â½ â¾

"       â¼  Enclosed Alphanumerics
"  U+2460  â  â¡ â¢ â£ â¤ â¥ â¦ â§ â¨
"  U+24B0              â¶ â· â¸ â¹ âº â» â¼ â½ â¾ â¿
"  U+24C0  â â â â â â â â â â â â â â â â
"  U+24D0  â â â â â â â â â â â â â â â â
"  U+24E0  â  â¡ â¢ â£ â¤ â¥ â¦ â§ â¨ â© âª

"       â¼  Misc. Mathematical Symbols-A
"  U+27C0  â â â â â â â â â â â   â
"  U+27D0  â â â â â â â â â â â â â â â â
"  U+27E0  â  â¡ â¢ â£ â¤ â¥ â¦ â§ â¨ â© âª â« â¬ â­ â® â¯

ino <C-U>[[ â¦
ino <C-U>]] â§
ino <C-U>[< â¨
ino <C-U>>] â©
ino <C-U>[<< âª
ino <C-U>>>] â«

"       â¼  Suppl. Arrows-A
"  U+27F0  â° â± â² â³ â´ âµ â¶ â· â¸ â¹ âº â» â¼ â½ â¾ â¿

"       â¼  Supplemental Arrows-B
"  U+2900  â¤ â¤ â¤ â¤ â¤ â¤ â¤ â¤ â¤ â¤ â¤ â¤ â¤ â¤ â¤ â¤
"  U+2910  â¤ â¤ â¤ â¤ â¤ â¤ â¤ â¤ â¤ â¤ â¤ â¤ â¤ â¤ â¤ â¤
"  U+2920  â¤  â¤¡ â¤¢ â¤£ â¤¤ â¤¥ â¤¦ â¤§ â¤¨ â¤© â¤ª â¤« â¤¬ â¤­ â¤® â¤¯
"  U+2930  â¤° â¤± â¤² â¤³ â¤´ â¤µ â¤¶ â¤· â¤¸ â¤¹ â¤º â¤» â¤¼ â¤½ â¤¾ â¤¿
"  U+2940  â¥ â¥ â¥ â¥ â¥ â¥ â¥ â¥ â¥ â¥ â¥ â¥ â¥ â¥ â¥ â¥
"  U+2950  â¥ â¥ â¥ â¥ â¥ â¥ â¥ â¥ â¥ â¥ â¥ â¥ â¥ â¥ â¥ â¥
"  U+2960  â¥  â¥¡ â¥¢ â¥£ â¥¤ â¥¥ â¥¦ â¥§ â¥¨ â¥© â¥ª â¥« â¥¬ â¥­ â¥® â¥¯
"  U+2970  â¥° â¥± â¥² â¥³ â¥´ â¥µ â¥¶ â¥· â¥¸ â¥¹ â¥º â¥» â¥¼ â¥½ â¥¾ â¥¿

"       â¼  Misc. Math Symbols-B
"  U+2980  â¦ â¦ â¦ â¦ â¦ â¦ â¦ â¦ â¦ â¦ â¦ â¦ â¦ â¦ â¦ â¦
"  U+2990  â¦ â¦ â¦ â¦ â¦ â¦ â¦ â¦ â¦ â¦ â¦ â¦ â¦ â¦ â¦ â¦
"  U+29A0  â¦  â¦¡ â¦¢ â¦£ â¦¤ â¦¥ â¦¦ â¦§ â¦¨ â¦© â¦ª â¦« â¦¬ â¦­ â¦® â¦¯
"  U+29B0  â¦° â¦± â¦² â¦³ â¦´ â¦µ â¦¶ â¦· â¦¸ â¦¹ â¦º â¦» â¦¼ â¦½ â¦¾ â¦¿
"  U+29C0  â§ â§ â§ â§ â§ â§ â§ â§ â§ â§ â§ â§ â§ â§ â§ â§
"  U+29D0  â§ â§ â§ â§ â§ â§ â§ â§ â§ â§ â§ â§ â§ â§ â§ â§
"  U+29E0  â§  â§¡ â§¢ â§£ â§¤ â§¥ â§¦ â§§ â§¨ â§© â§ª â§« â§¬ â§­ â§® â§¯
"  U+29F0  â§° â§± â§² â§³ â§´ â§µ â§¶ â§· â§¸ â§¹ â§º â§» â§¼ â§½ â§¾ â§¿

ino <C-U>spot â¦
ino <C-U>: â¦
ino <C-U>{{ â¦
ino <C-U>}} â¦
ino <C-U>(( â¦
ino <C-U>)) â¦

"       â¼  Supplemental Math Operators
"  U+2A00  â¨ â¨ â¨ â¨ â¨ â¨ â¨ â¨ â¨ â¨ â¨ â¨ â¨ â¨ â¨ â¨
"  U+2A10  â¨ â¨ â¨ â¨ â¨ â¨ â¨ â¨ â¨ â¨ â¨ â¨ â¨ â¨ â¨ â¨
"  U+2A20  â¨  â¨¡ â¨¢ â¨£ â¨¤ â¨¥ â¨¦ â¨§ â¨¨ â¨© â¨ª â¨« â¨¬ â¨­ â¨® â¨¯
"  U+2A30  â¨° â¨± â¨² â¨³ â¨´ â¨µ â¨¶ â¨· â¨¸ â¨¹ â¨º â¨» â¨¼ â¨½ â¨¾ â¨¿
"  U+2A40  â© â© â© â© â© â© â© â© â© â© â© â© â© â© â© â©
"  U+2A50  â© â© â© â© â© â© â© â© â© â© â© â© â© â© â© â©
"  U+2A60  â©  â©¡ â©¢ â©£ â©¤ â©¥ â©¦ â©§ â©¨ â©© â©ª â©« â©¬ â©­ â©® â©¯
"  U+2A70  â©° â©± â©² â©³ â©´ â©µ â©¶ â©· â©¸ â©¹ â©º â©» â©¼ â©½ â©¾ â©¿
"  U+2A80  âª âª âª âª âª âª âª âª âª âª âª âª âª âª âª âª
"  U+2A90  âª âª âª âª âª âª âª âª âª âª âª âª âª âª âª âª
"  U+2AA0  âª  âª¡ âª¢ âª£ âª¤ âª¥ âª¦ âª§ âª¨ âª© âªª âª« âª¬ âª­ âª® âª¯
"  U+2AB0  âª° âª± âª² âª³ âª´ âªµ âª¶ âª· âª¸ âª¹ âªº âª» âª¼ âª½ âª¾ âª¿
"  U+2AC0  â« â« â« â« â« â« â« â« â« â« â« â« â« â« â« â«
"  U+2AD0  â« â« â« â« â« â« â« â« â« â« â« â« â« â« â« â«
"  U+2AE0  â«  â«¡ â«¢ â«£ â«¤ â«¥ â«¦ â«§ â«¨ â«© â«ª â«« â«¬ â«­ â«® â«¯
"  U+2AF0  â«° â«± â«² â«³ â«´ â«µ â«¶ â«· â«¸ â«¹ â«º â«» â«¼ â«½ â«¾ â«¿

ino <C-u>; â¨¾
ino <C-U><Bar><Bar><Bar> â«´
ino <C-U>/// â«»

"       â¼  Misc. Symbols and Arrows
"  U+2B00  â¬ â¬ â¬ â¬ â¬ â¬ â¬ â¬ â¬ â¬ â¬ â¬ â¬ â¬ â¬ â¬
"  U+2B10  â¬ â¬ â¬ â¬ â¬ â¬ â¬ â¬ â¬ â¬ â¬ â¬ â¬ â¬ â¬ â¬
"  U+2B20  â¬  â¬¡ â¬¢ â¬£ â¬¤ â¬¥ â¬¦ â¬§ â¬¨ â¬© â¬ª â¬« â¬¬ â¬­ â¬® â¬¯
"  U+2B30  â¬° â¬± â¬² â¬³ â¬´ â¬µ â¬¶ â¬· â¬¸ â¬¹ â¬º â¬» â¬¼ â¬½ â¬¾ â¬¿
"  U+2B40  â­ â­ â­ â­ â­ â­ â­ â­ â­ â­ â­ â­ â­ â­ â­ â­
"  U+2B50  â­ â­ â­ â­ â­ â­ â­ â­ â­ â­ â­ â­ â­ â­ â­ â­
"  U+2B60  â­  â­¡ â­¢ â­£ â­¤ â­¥ â­¦ â­§ â­¨ â­© â­ª â­« â­¬ â­­ â­® â­¯
"  U+2B70  â­° â­± â­² â­³    â­¶ â­· â­¸ â­¹ â­º â­» â­¼ â­½ â­¾ â­¿
"  U+2B80  â® â® â® â® â® â® â® â® â® â® â® â® â® â® â® â®
"  U+2B90  â® â® â® â® â® â®    â® â® â® â® â® â® â® â®
"  U+2BA0  â®  â®¡ â®¢ â®£ â®¤ â®¥ â®¦ â®§ â®¨ â®© â®ª â®« â®¬ â®­ â®® â®¯
"  U+2BB0  â®° â®± â®² â®³ â®´ â®µ â®¶ â®· â®¸ â®¹      â®½ â®¾ â®¿
"  U+2BC0  â¯ â¯ â¯ â¯ â¯ â¯ â¯ â¯ â¯   â¯ â¯ â¯ â¯ â¯ â¯
"  U+2BD0  â¯ â¯
"  U+2BE0                             â¯¬ â¯­ â¯® â¯¯
"  U+2C70    â±±
"  U+2E20                 â¸®

" See https://en.wikipedia.org/wiki/Mathematical_Alphanumeric_Symbols
" Holes are filled here (e.g. planck constant â is what we use for script h)
"
"       â¼  Mathematical Alphan. Symbols
"
" ð ð ð ð ð ð ð ð ð ð ð ð ð ð ð ð ð ð ð ð ð ð ð ð ð ð
" ð ð ð ð ð ð ð  ð¡ ð¢ ð£ ð¤ ð¥ ð¦ ð§ ð¨ ð© ðª ð« ð¬ ð­ ð® ð¯ ð° ð± ð² ð³

ino <C-U>bA ð
ino <C-U>bB ð
ino <C-U>bC ð
ino <C-U>bD ð
ino <C-U>bE ð
ino <C-U>bF ð
ino <C-U>bG ð
ino <C-U>bH ð
ino <C-U>bI ð
ino <C-U>bJ ð
ino <C-U>bK ð
ino <C-U>bL ð
ino <C-U>bM ð
ino <C-U>bN ð
ino <C-U>bO ð
ino <C-U>bP ð
ino <C-U>bQ ð
ino <C-U>bR ð
ino <C-U>bS ð
ino <C-U>bT ð
ino <C-U>bU ð
ino <C-U>bV ð
ino <C-U>bW ð
ino <C-U>bX ð
ino <C-U>bY ð
ino <C-U>bZ ð
ino <C-U>ba ð
ino <C-U>bb ð
ino <C-U>bc ð
ino <C-U>bd ð
ino <C-U>be ð
ino <C-U>bf ð
ino <C-U>bg ð 
ino <C-U>bh ð¡
ino <C-U>bi ð¢
ino <C-U>bj ð£
ino <C-U>bk ð¤
ino <C-U>bl ð¥
ino <C-U>bm ð¦
ino <C-U>bn ð§
ino <C-U>bo ð¨
ino <C-U>bp ð©
ino <C-U>bq ðª
ino <C-U>br ð«
ino <C-U>bs ð¬
ino <C-U>bt ð­
ino <C-U>bu ð®
ino <C-U>bv ð¯
ino <C-U>bw ð°
ino <C-U>bx ð±
ino <C-U>by ð²
ino <C-U>bz ð³

" ð´ ðµ ð¶ ð· ð¸ ð¹ ðº ð» ð¼ ð½ ð¾ ð¿ ð ð ð ð ð ð ð ð ð ð ð ð ð ð
" ð ð ð ð ð ð ð   ð ð ð ð ð ð ð ð ð ð ð  ð¡ ð¢ ð£ ð¤ ð¥ ð¦ ð§

ino <C-U>iA ð´
ino <C-U>iB ðµ
ino <C-U>iC ð¶
ino <C-U>iD ð·
ino <C-U>iE ð¸
ino <C-U>iF ð¹
ino <C-U>iG ðº
ino <C-U>iH ð»
ino <C-U>iI ð¼
ino <C-U>iJ ð½
ino <C-U>iK ð¾
ino <C-U>iL ð¿
ino <C-U>iM ð
ino <C-U>iN ð
ino <C-U>iO ð
ino <C-U>iP ð
ino <C-U>iQ ð
ino <C-U>iR ð
ino <C-U>iS ð
ino <C-U>iT ð
ino <C-U>iU ð
ino <C-U>iV ð
ino <C-U>iW ð
ino <C-U>iX ð
ino <C-U>iY ð
ino <C-U>iZ ð
ino <C-U>ia ð
ino <C-U>ib ð
ino <C-U>ic ð
ino <C-U>id ð
ino <C-U>ie ð
ino <C-U>if ð
ino <C-U>ig ð
ino <C-U>ih â
ino <C-U>ii ð
ino <C-U>ij ð
ino <C-U>ik ð
ino <C-U>il ð
ino <C-U>im ð
ino <C-U>in ð
ino <C-U>io ð
ino <C-U>ip ð
ino <C-U>iq ð
ino <C-U>ir ð
ino <C-U>is ð 
ino <C-U>it ð¡
ino <C-U>iu ð¢
ino <C-U>iv ð£
ino <C-U>iw ð¤
ino <C-U>ix ð¥
ino <C-U>iy ð¦
ino <C-U>iz ð§

" ð¨ ð© ðª ð« ð¬ ð­ ð® ð¯ ð° ð± ð² ð³ ð´ ðµ ð¶ ð· ð¸ ð¹ ðº ð» ð¼ ð½ ð¾ ð¿ ð ð
" ð ð ð ð ð ð ð ð ð ð ð ð ð ð ð ð ð ð ð ð ð ð ð ð ð ð

ino <C-U>biA ð¨
ino <C-U>biB ð©
ino <C-U>biC ðª
ino <C-U>biD ð«
ino <C-U>biE ð¬
ino <C-U>biF ð­
ino <C-U>biG ð®
ino <C-U>biH ð¯
ino <C-U>biI ð°
ino <C-U>biJ ð±
ino <C-U>biK ð²
ino <C-U>biL ð³
ino <C-U>biM ð´
ino <C-U>biN ðµ
ino <C-U>biO ð¶
ino <C-U>biP ð·
ino <C-U>biQ ð¸
ino <C-U>biR ð¹
ino <C-U>biS ðº
ino <C-U>biT ð»
ino <C-U>biU ð¼
ino <C-U>biV ð½
ino <C-U>biW ð¾
ino <C-U>biX ð¿
ino <C-U>biY ð
ino <C-U>biZ ð
ino <C-U>bia ð
ino <C-U>bib ð
ino <C-U>bic ð
ino <C-U>bid ð
ino <C-U>bie ð
ino <C-U>bif ð
ino <C-U>big ð
ino <C-U>bih ð
ino <C-U>bii ð
ino <C-U>bij ð
ino <C-U>bik ð
ino <C-U>bil ð
ino <C-U>bim ð
ino <C-U>bin ð
ino <C-U>bio ð
ino <C-U>bip ð
ino <C-U>biq ð
ino <C-U>bir ð
ino <C-U>bis ð
ino <C-U>bit ð
ino <C-U>biu ð
ino <C-U>biv ð
ino <C-U>biw ð
ino <C-U>bix ð
ino <C-U>biy ð
ino <C-U>biz ð

" ð   ð ð     ð¢     ð¥ ð¦     ð© ðª ð« ð¬   ð® ð¯ ð° ð± ð² ð³ ð´ ðµ
" ð¶ ð· ð¸ ð¹   ð»   ð½ ð¾ ð¿ ð   ð ð   ð ð ð ð ð ð ð ð ð ð ð

ino <C-U>sA ð
ino <C-U>sB â¬
ino <C-U>sC ð
ino <C-U>sD ð
ino <C-U>sE â°
ino <C-U>sF â±
ino <C-U>sG ð¢
ino <C-U>sH â
ino <C-U>sI â
ino <C-U>sJ ð¥
ino <C-U>sK ð¦
ino <C-U>sL â
ino <C-U>sM â³
ino <C-U>sN ð©
ino <C-U>sO ðª
ino <C-U>sP ð«
ino <C-U>sQ ð¬
ino <C-U>sR â
ino <C-U>sS ð®
ino <C-U>sT ð¯
ino <C-U>sU ð°
ino <C-U>sV ð±
ino <C-U>sW ð²
ino <C-U>sX ð³
ino <C-U>sY ð´
ino <C-U>sZ ðµ
ino <C-U>sa ð¶
ino <C-U>sb ð·
ino <C-U>sc ð¸
ino <C-U>sd ð¹
ino <C-U>se â¯
ino <C-U>sf ð»
ino <C-U>sg â
ino <C-U>sh ð½
ino <C-U>si ð¾
ino <C-U>sj ð¿
ino <C-U>sk ð
ino <C-U>sl â
ino <C-U>sm ð
ino <C-U>sn ð
ino <C-U>so â´
ino <C-U>sp ð
ino <C-U>sq ð
ino <C-U>sr ð
ino <C-U>ss ð
ino <C-U>st ð
ino <C-U>su ð
ino <C-U>sv ð
ino <C-U>sw ð
ino <C-U>sx ð
ino <C-U>sy ð
ino <C-U>sz ð

" ð ð ð ð ð ð ð ð ð ð ð ð ð ð ð ð ð  ð¡ ð¢ ð£ ð¤ ð¥ ð¦ ð§ ð¨ ð©
" ðª ð« ð¬ ð­ ð® ð¯ ð° ð± ð² ð³ ð´ ðµ ð¶ ð· ð¸ ð¹ ðº ð» ð¼ ð½ ð¾ ð¿ ð ð ð ð

ino <C-U>sbA ð
ino <C-U>sbB ð
ino <C-U>sbC ð
ino <C-U>sbD ð
ino <C-U>sbE ð
ino <C-U>sbF ð
ino <C-U>sbG ð
ino <C-U>sbH ð
ino <C-U>sbI ð
ino <C-U>sbJ ð
ino <C-U>sbK ð
ino <C-U>sbL ð
ino <C-U>sbM ð
ino <C-U>sbN ð
ino <C-U>sbO ð
ino <C-U>sbP ð
ino <C-U>sbQ ð 
ino <C-U>sbR ð¡
ino <C-U>sbS ð¢
ino <C-U>sbT ð£
ino <C-U>sbU ð¤
ino <C-U>sbV ð¥
ino <C-U>sbW ð¦
ino <C-U>sbX ð§
ino <C-U>sbY ð¨
ino <C-U>sbZ ð©
ino <C-U>sba ðª
ino <C-U>sbb ð«
ino <C-U>sbc ð¬
ino <C-U>sbd ð­
ino <C-U>sbe ð®
ino <C-U>sbf ð¯
ino <C-U>sbg ð°
ino <C-U>sbh ð±
ino <C-U>sbi ð²
ino <C-U>sbj ð³
ino <C-U>sbk ð´
ino <C-U>sbl ðµ
ino <C-U>sbm ð¶
ino <C-U>sbn ð·
ino <C-U>sbo ð¸
ino <C-U>sbp ð¹
ino <C-U>sbq ðº
ino <C-U>sbr ð»
ino <C-U>sbs ð¼
ino <C-U>sbt ð½
ino <C-U>sbu ð¾
ino <C-U>sbv ð¿
ino <C-U>sbw ð
ino <C-U>sbx ð
ino <C-U>sby ð
ino <C-U>sbz ð

" ð¸ ð¹   ð» ð¼ ð½ ð¾   ð ð ð ð ð   ð       ð ð ð ð ð ð ð
" ð ð ð ð ð ð ð ð ð ð ð ð ð ð ð  ð¡ ð¢ ð£ ð¤ ð¥ ð¦ ð§ ð¨ ð© ðª ð«

ino <C-U>[A ð¸
ino <C-U>[B ð¹
ino <C-U>[C â
ino <C-U>[D ð»
ino <C-U>[E ð¼
ino <C-U>[F ð½
ino <C-U>[G ð¾
ino <C-U>[H â
ino <C-U>[H â
ino <C-U>[I ð
ino <C-U>[J ð
ino <C-U>[K ð
ino <C-U>[L ð
ino <C-U>[M ð
ino <C-U>[N â
ino <C-U>[O ð
ino <C-U>[P â
ino <C-U>[Q â
ino <C-U>[R â
ino <C-U>[S ð
ino <C-U>[T ð
ino <C-U>[U ð
ino <C-U>[V ð
ino <C-U>[W ð
ino <C-U>[X ð
ino <C-U>[Y ð
ino <C-U>[Z â¤
ino <C-U>[a ð
ino <C-U>[b ð
ino <C-U>[c ð
ino <C-U>[d ð
ino <C-U>[e ð
ino <C-U>[f ð
ino <C-U>[g ð
ino <C-U>[h ð
ino <C-U>[i ð
ino <C-U>[j ð
ino <C-U>[k ð
ino <C-U>[l ð
ino <C-U>[m ð
ino <C-U>[n ð
ino <C-U>[o ð 
ino <C-U>[p ð¡
ino <C-U>[q ð¢
ino <C-U>[r ð£
ino <C-U>[s ð¤
ino <C-U>[t ð¥
ino <C-U>[u ð¦
ino <C-U>[v ð§
ino <C-U>[w ð¨
ino <C-U>[x ð©
ino <C-U>[y ðª
ino <C-U>[z ð«

" ð¨ ð© ðª ð« ð¬ ð­ ð® ð¯ ð° ð± ð² ð³ ð´ ðµ ð¶ ð· ð¸ ð¹ ðº ð» ð¼ ð½ ð¾ ð¿ ð ð
" ð ð ð ð ð ð ð ð ð ð ð ð ð ð ð ð ð ð ð ð ð ð ð ð ð ð ð ð ð ð ð  ð¡

ino <C-U>bAlpha ð¨
ino <C-U>bBeta ð©
ino <C-U>bGamma ðª
ino <C-U>bDelta ð«
ino <C-U>bEpsilon ð¬
ino <C-U>bZeta ð­
ino <C-U>bEta ð®
ino <C-U>bTheta ð¯
ino <C-U>bIota ð°
ino <C-U>bKappa ð±
ino <C-U>bLambda ð²
ino <C-U>bMu ð³
ino <C-U>bNu ð´
ino <C-U>bXi ðµ
ino <C-U>bOmnicron ð¶
ino <C-U>bPi ð·
ino <C-U>bRho ð¸
ino <C-U>bSigma ðº
ino <C-U>bTau ð»
ino <C-U>bUpsilon ð¼
ino <C-U>bPhi ð½
ino <C-U>bChi ð¾
ino <C-U>bPsi ð¿
ino <C-U>bOmega ð
ino <C-U>bNabla ð
ino <C-U>balpha ð
ino <C-U>bbeta ð
ino <C-U>bgamma ð
ino <C-U>bdelta ð
ino <C-U>bepsilon ð
ino <C-U>bzeta ð
" ino <C-U>beta ð
ino <C-U>btheta ð
ino <C-U>biota ð
ino <C-U>bkappa ð
ino <C-U>blambda ð
ino <C-U>bmu ð
ino <C-U>bnu ð
ino <C-U>bxi ð
ino <C-U>bomnicron ð
ino <C-U>bpi ð
ino <C-U>brho ð
ino <C-U>bfsigma ð
ino <C-U>bsigma ð
ino <C-U>btau ð
ino <C-U>bupsilon ð
ino <C-U>bphi ð
ino <C-U>bchi ð
ino <C-U>bpsi ð
ino <C-U>bomega ð
ino <C-U>bpdiff ð

" ð¢ ð£ ð¤ ð¥ ð¦ ð§ ð¨ ð© ðª ð« ð¬ ð­ ð® ð¯ ð° ð± ð² ð³ ð´ ðµ ð¶ ð· ð¸ ð¹ ðº ð»
" ð¼ ð½ ð¾ ð¿ ð ð ð ð ð ð ð ð ð ð ð ð ð ð ð ð ð ð ð ð ð ð ð ð ð ð ð ð

ino <C-U>iAlpha ð¢
ino <C-U>iBeta ð£
ino <C-U>iGamma ð¤
ino <C-U>iDelta ð¥
ino <C-U>iEpsilon ð¦
ino <C-U>iZeta ð§
ino <C-U>iEta ð¨
ino <C-U>iTheta ð©
ino <C-U>iIota ðª
ino <C-U>iKappa ð«
ino <C-U>iLambda ð¬
ino <C-U>iMu ð­
ino <C-U>iNu ð®
ino <C-U>iXi ð¯
ino <C-U>iOmnicron ð°
ino <C-U>iPi ð±
ino <C-U>iRho ð²
ino <C-U>iSigma ð´
ino <C-U>iTau ðµ
ino <C-U>iUpsilon ð¶
ino <C-U>iPhi ð·
ino <C-U>iChi ð¸
ino <C-U>iPsi ð¹
ino <C-U>iOmega ðº
ino <C-U>iNabla ð»
ino <C-U>ialpha ð¼
ino <C-U>ibeta ð½
ino <C-U>igamma ð¾
ino <C-U>idelta ð¿
ino <C-U>iepsilon ð
ino <C-U>izeta ð
ino <C-U>ieta ð
ino <C-U>itheta ð
ino <C-U>iiota ð
ino <C-U>ikappa ð
ino <C-U>ilambda ð
ino <C-U>imu ð
ino <C-U>inu ð
ino <C-U>ixi ð
ino <C-U>iomnicron ð
ino <C-U>ipi ð
ino <C-U>irho ð
ino <C-U>ifsigma ð
ino <C-U>isigma ð
ino <C-U>itau ð
ino <C-U>iupsilon ð
ino <C-U>iphi ð
ino <C-U>ichi ð
ino <C-U>ipsi ð
ino <C-U>iomega ð
ino <C-U>ipdiff ð

" ð ð ð ð ð  ð¡ ð¢ ð£ ð¤ ð¥ ð¦ ð§ ð¨ ð© ðª ð« ð¬ ð­ ð® ð¯ ð° ð± ð² ð³ ð´ ðµ
" ð¶ ð· ð¸ ð¹ ðº ð» ð¼ ð½ ð¾ ð¿ ð ð ð ð ð ð ð ð ð ð ð ð ð ð ð ð ð ð ð ð ð ð

ino <C-U>biAlpha ð
ino <C-U>biBeta ð
ino <C-U>biGamma ð
ino <C-U>biDelta ð
ino <C-U>biEpsilon ð 
ino <C-U>biZeta ð¡
ino <C-U>biEta ð¢
ino <C-U>biTheta ð£
ino <C-U>biIota ð¤
ino <C-U>biKappa ð¥
ino <C-U>biLambda ð¦
ino <C-U>biMu ð§
ino <C-U>biNu ð¨
ino <C-U>biXi ð©
ino <C-U>biOmnicron ðª
ino <C-U>biPi ð«
ino <C-U>biRho ð¬
ino <C-U>biSigma ð®
ino <C-U>biTau ð¯
ino <C-U>biUpsilon ð°
ino <C-U>biPhi ð±
ino <C-U>biChi ð²
ino <C-U>biPsi ð³
ino <C-U>biOmega ð´
ino <C-U>biNabla ðµ
ino <C-U>bialpha ð¶
ino <C-U>bibeta ð·
ino <C-U>bigamma ð¸
ino <C-U>bidelta ð¹
ino <C-U>biepsilon ðº
ino <C-U>bizeta ð»
ino <C-U>bieta ð¼
ino <C-U>bitheta ð½
ino <C-U>biiota ð¾
ino <C-U>bikappa ð¿
ino <C-U>bilambda ð
ino <C-U>bimu ð
ino <C-U>binu ð
ino <C-U>bixi ð
ino <C-U>biomnicron ð
ino <C-U>bipi ð
ino <C-U>birho ð
ino <C-U>bifsigma ð
ino <C-U>bisigma ð
ino <C-U>bitau ð
ino <C-U>biupsilon ð
ino <C-U>biphi ð
ino <C-U>bichi ð
ino <C-U>bipsi ð
ino <C-U>biomega ð
ino <C-U>bipdiff ð

" ð ð ð ð ð ð ð ð ð ð
" ð ð ð ð ð ð ð ð ð  ð¡

ino <C-U>b0 ð
ino <C-U>b1 ð
ino <C-U>b2 ð
ino <C-U>b3 ð
ino <C-U>b4 ð
ino <C-U>b5 ð
ino <C-U>b6 ð
ino <C-U>b7 ð
ino <C-U>b8 ð
ino <C-U>b9 ð
ino <C-U>[0 ð
ino <C-U>[1 ð
ino <C-U>[2 ð
ino <C-U>[3 ð
ino <C-U>[4 ð
ino <C-U>[5 ð
ino <C-U>[6 ð
ino <C-U>[7 ð
ino <C-U>[8 ð 
ino <C-U>[9 ð¡

"       â¼  Suppl. Arrows-C
" U+1F800  ð  ð  ð  ð  ð  ð  ð  ð  ð  ð  ð  ð 
" U+1F810  ð  ð  ð  ð  ð  ð  ð  ð  ð  ð  ð  ð  ð  ð  ð  ð 
" U+1F820  ð   ð ¡ ð ¢ ð £ ð ¤ ð ¥ ð ¦ ð § ð ¨ ð © ð ª ð « ð ¬ ð ­ ð ® ð ¯
" U+1F830  ð ° ð ± ð ² ð ³ ð ´ ð µ ð ¶ ð · ð ¸ ð ¹ ð º ð » ð ¼ ð ½ ð ¾ ð ¿
" U+1F840  ð¡ ð¡ ð¡ ð¡ ð¡ ð¡ ð¡ ð¡
" U+1F850  ð¡ ð¡ ð¡ ð¡ ð¡ ð¡ ð¡
" U+1F860  ð¡  ð¡¡ ð¡¢ ð¡£ ð¡¤ ð¡§ ð¡¨ ð¡© ð¡ª ð¡« ð¡¬ ð¡¯
" U+1F870  ð¡° ð¡± ð¡² ð¡³ ð¡´ ð¡· ð¡¸ ð¡¹ ð¡º ð¡» ð¡¼ ð¡¿
" U+1F880  ð¢ ð¢ ð¢ ð¢ ð¢ ð¢
" U+1F890  ð¢ ð¢ ð¢ ð¢ ð¢ ð¢ ð¢ ð¢ ð¢ ð¢ ð¢ ð¢
" U+1F8A0  ð¢  ð¢¡ ð¢¢ ð¢£ ð¢¤ ð¢¥ ð¢¦ ð¢§ ð¢¨ ð¢© ð¢ª ð¢«
